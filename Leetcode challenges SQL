This file is dedicated to the process of solving SQL challenges from the Leetcode. 





                                   SECTION:
                                    SELECT
___________________________________________________________________________________________________________________________________________

1. 1757. Recyclable and Low Fat Products 
Task: product_id is the primary key (column with unique values) for this table.
low_fats is an ENUM (category) of type ('Y', 'N') where 'Y' means this product is low fat and 'N' means it is not.
recyclable is an ENUM (category) of types ('Y', 'N') where 'Y' means this product is recyclable and 'N' means it is not.

- Write a solution to find the ids of products that are both low fat and recyclable.


CODE : 

1sr trial : 

SELECT
  product_id
FROM Products
WHERE low_fats = "Y" AND 
WHERE recyclable = "Y";
______________________________---

2nd with Correction :

SELECT
  product_id
FROM Products
WHERE low_fats = "Y" AND recyclable = "Y";
_______________________________-

Thoughts and Understanding of the exercise : 

In the 1st trial I used 2 WHERE clause like I confused again it with CASE WHEN conditioning 
where we repeat that code CASE WHEN, but it seems that when you use WHERE clause it is only possible 
to use one time, and further set your condition. That's it. 









2. 584. Find Customer Referee

In SQL, id is the primary key column for this table.
Each row of this table indicates the id of a customer, their name, and the id of the customer who referred them.

Task:Find the names of the customer that are not referred by the customer with id = 2.
______________

Trials that did not work:

SELECT name
FROM Customer
WHERE referee_id !=2 
____________________
SELECT name
FROM Customer
WHERE referee_id <> 2 ;
________________

SELECT name
FROM Customer
WHERE referee_id <> 2 ;
______________________________________________

Correct Solution : 

SELECT name
FROM Customer
WHERE referee_id !=2 OR referee_id IS NULL;
____________________

THOUGHTS : 

As I see it is super important to be attentive to every detail of the challenge. The intuitive part of this exercise 
was that, correctly I used the (SELECT statement) and I was a bit confused with the filtering part with the WHERE clause,
at the beginning I was thinking let's use the = (equal operator) like setting the conditon to match to NULL and 1 . But asked
CHAT GPT how can I filter in SQL for example, I did not say give me the answer, but learned from other examples, how can 
we filter the where clause, for example , let say we dont want to include a particular value, we can simply like use the sign
!= (exclamation mark and equa) or <>  (greater or less) sign to exclude the value. It was true that way. But imagine, in that particular
column we have also NULL values. we need to use the logical operator (OR) and write the column name and write (IS NULL). To filter
we are saying exclude 2 and include all and null values also. That's it. 









3. 595. Big Countries

Challenge : 

A country is big if:

it has an area of at least three million (i.e., 3000000 km2), or
it has a population of at least twenty-five million (i.e., 25000000).
Write a solution to find the name, population, and area of the big countries.


Trials :
_______________
SELECT
    name,
    population,
    area
FROM World
WHERE area =>3000000 AND population => 25000000;

________________________________________________________
Final solution: 

SELECT
    name,
    population,
    area
FROM World
WHERE area >=3000000 OR population >= 25000000;
_________________________________

Thoughts: 
It took me not very long it complete the exercise, I put everything correctly just forgot the order of logical operators, in this case when we look for any value at least in
the challenge  we have to put first the greater operator (>) then the equal(=) operator always this is the correct syntax. And the second thing was to be attantive what the exercise
asks to do. I used the AND logical operator instead of OR. When I looked at the exercise again I realized I need to use the OR logical operator. Thats it. 







4. 1148. Article Views I
There is no primary key (column with unique values) for this table, the table may have duplicate rows.
Each row of this table indicates that some viewer viewed an article (written by some author) on some date. 
Note that equal author_id and viewer_id indicate the same person.

- Write a solution to find all the authors that viewed
at least one of their own articles.


CODE:
_______________
Trial (1): 

SELECT DISTINCT            
    viewer_id,
    author_id, 
    article_id 
FROM Views
ORDER BY viewer_id ASC;
____________________________________________________
 Trial (2):

SELECT DISTINCT             
    article_id,
    author_id,
    viewer_id,
    view_date
FROM Views
ORDER BY viewer_id ASC;

_________________________________________________________
SOLUTION: 

SELECT DISTINCT author_id AS id
FROM Views
WHERE author_id = viewer_id
ORDER BY id ASC;

Thoughts on the learning process:

Why it was so simple but I couldn't get the logic, I mean I guessed that it is (author_id & viewer_id) I need to focus on,
however instead of using the where clause to filter the values in those columns which are the same. I did instead the CONCAT function,
with concat I achieved only AS id 7 that's it. It seems that I was counting the whole rows not finding or filtering the same id. This
solution seems very easy but I was a bit confused and I would be honest did not get it appropriately. If I see the solution now step by
step if I try to understand it . Let's do it now. In the 1st line of code we write SELECT statement with DISTINCT we filter the author_id
by saying that return it only once and don't repeat it. Then we filter the author id and find where it equals to viewer_id. 









5. 1683. Invalid Tweets

tweet_id is the primary key (column with unique values) for this table. content consists of alphanumeric 
characters, '!', or ' ' and no other special characters. This table contains all the tweets in a social media app.


TASK: 

1. Write a solution to find the IDs of the invalid tweets. 
2.The tweet is invalid if the number of characters used in the content of the tweet is strictly greater than 15. 
3.Return the result table in any order.

Input: 

| tweet_id | content                           |
| -------- | --------------------------------- |
| 1        | Let us Code                       |
| 2        | More than fifteen chars are here! |


Trials:
____________

SELECT tweet_id
FROM Tweets
WHERE tweet_id = 2;

-------/ /--------

SELECT tweet_id
FROM Tweets
WHERE LENGTH (tweet_id) >15;

__________
SOLUTION:

SELECT tweet_id
FROM Tweets
WHERE LENGTH (content) >15;


_______________
LEARNING PROCESS:

With my trial code it was like drifting around and coding intuitivly like normally I do . However, if we pay 
attantion to the question closely it says the column is invalid if nb of characters is greater than 15. So what I can try now is ask
CHATGPT how do we filter with WHERE clause the nb of characters within column. Since I checked the answer is in any columns, we can count the
number of values in the column like any characters with the LENGTH(column_name) function. I wrote the code and run the excercise. But it still
showed an error then I though what was the issue. It seemed that I checked the wrong column , I had to check the content column. When doing
that I got the correct answer. Great job. 






                                          SECTION:
                                        BASIC JOINS 
___________________________________________________________________________________________________________________________________________




6. 1378. Replace Employee ID With The Unique Identifier

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| name          | varchar |
+---------------+---------+
id is the primary key (column with unique values) for this table.
Each row of this table contains the id and the name of an employee in a company.

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| unique_id     | int     |
+---------------+---------+
(id, unique_id) is the primary key (combination of columns with unique values) for this table.
Each row of this table contains the id and the corresponding unique id of an employee in the company.
 

Write a solution to :

1. Show the unique ID of each user, 
2. If a user does not have a unique ID replace just show null.



Return the result table in any order.


                                          
TRIALS :

SELECT Employees.id, EmployeeUNI.id,EmployeeUNI.unique_id
FROM Employees
JOIN EmployeeUNI
    ON Employees.id = EmployeeUNI.id
AND Employees.id = EmployeeUNI.unique_id;


             (2)
SELECT Employees.id, Employees.name
FROM Employees
LEFT JOIN EmployeeUNI
    ON Employees.id = EmployeeUNI.id
AND Employees.id = EmployeeUNI.unique_id;



SOLUTION:

SELECT EmployeeUNI.unique_id, Employees.name
FROM Employees
LEFT JOIN EmployeeUNI
ON Employees.id = EmployeeUNI.id;


LEARNING PROCESS:

So this is only the draft of the join I am trying to do. Since we do the join on two columns, we also need to include
the second column  with the AND operator. Since I tried with the AND operator it did not work. Then I tried different 
option and it worked as usual we work with the joins , basically we joined the tables on ID and showed unique_id column,
and the name of the table. It was not complicated but I made it a bit complicated . Anyway resolved the question. 













7. 1068. Product Sales Analysis I 
+-------------+-------+
| Column Name | Type  |
+-------------+-------+
| sale_id     | int   |
| product_id  | int   |
| year        | int   |
| quantity    | int   |
| price       | int   |
+-------------+-------+
(sale_id, year) is the primary key (combination of columns with unique values) of this table.
product_id is a foreign key (reference column) to Product table.
Each row of this table shows a sale on the product product_id in a certain year.
Note that the price is per unit.

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| product_id   | int     |
| product_name | varchar |
+--------------+---------+
product_id is the primary key (column with unique values) of this table.
Each row of this table indicates the product name of each product.
 

Write a solution to report the product_name, year, and price for each sale_id in the Sales table.

Return the resulting table in any order.


TRIALS:

SOLUTION:

SELECT Product.product_name, Sales.year, Sales.price
FROM Sales
LEFT JOIN Product
ON Sales.product_id = Product.product_id; 

LEARNING PROCESS:

In this SQL code, I solved the challegne in the first trial without any mistakes. It's interesting to see this development. Seemed very basic. 
We had Sales and Product tables joined on the product_id, since it was the primary key for both tables. If I am not mistaken, we join tables
on primary keys since they return the unique values for of the table and will not repeat the values. The good part is I resolved the code
easily, but it is super important to understand why it works the way it does. We joined basically the product table with the Sales table. In this code Sales 
table is our main table, meaning the primary key in this code is Sales product_id and the Product table product_id would be our foreign key,
Why? Because our main table is SALES, we determine the main table when we use the table next to the FROM clause, when we use next to the JOIN 
clause, the table it  would be our secondary. Also it is important to see the relationship. For example, what we want to show as a column. We
are showing the product name, sales_year, and sales_price. It implies  that the relationship between tables is one-to-many, meaning the name of
the product is related to many columns in the Sales table, such as Year and Price. 











8. 1581. Customer Who Visited but Did Not Make Any Transactions
Table: Visits

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| visit_id    | int     |
| customer_id | int     |
+-------------+---------+
visit_id is the column with unique values for this table.
This table contains information about the customers who visited the mall.

Table: Transactions

+----------------+---------+
| Column Name    | Type    |
+----------------+---------+
| transaction_id | int     |
| visit_id       | int     |
| amount         | int     |
+----------------+---------+
transaction_id is column with unique values for this table.
This table contains information about the transactions made during the visit_id.
 

Write a solution to :

1. find the IDs of the users who visited without making any transactions 
2. and the number of times they made these types of visits.



TRIALS:

SELECT Visits.customer_id, Transactions.amount AS count_no_trans
FROM Visits
LEFT JOIN Transactions
ON Visits.visit_id = Transactions.visit_id;

(2)

SELECT Visits.customer_id, Transactions.transaction_id AS count_no_trans
FROM Visits
JOIN Transactions
ON Visits.visit_id = Transactions.visit_id;

Trial (3)
You said:
SELECT  Visits.customer_id, transactions.transaction_id, COUNT(*) AS count_no_trans
FROM Visits
left JOIN Transactions
ON Visits.visit_id = Transactions.visit_id
where transaction_id IS NULL ;
SOLUTION:

SELECT 
  Visits.customer_id, 
  COUNT(*) AS count_no_trans
FROM Visits
LEFT JOIN Transactions
  ON Visits.visit_id = Transactions.visit_id
WHERE Transactions.transaction_id IS NULL
GROUP BY Visits.customer_id;


LEARNING PROCESS:

This is a bit challenging, but I must pay attention to the details. I was just doing it intuitively, not thinking and breaking down the question.
Please continue breaking down the question. This one I tried many times, like 10 trials, but could not get the right answer
Here you can see that in the trials there I did until there and gave for CHATGPT to correct me. My query was almost right.
I did not consider several things: 
  1. I don't need to repeat the transaction_id column, just with COUNT(*) clause , and at the end with WHERE clause I am already 
filtering the rows. 
2. I forgot to include the group by function ,why it is important, without group by we get the total number of people who entered with no
tranactions, but with group by customer_id, we see who did not make transaction how many times per cutomer_id. 
I don't know if I did the right thing by asking CHATGPT to help me with code, I dont know but anyway I am getting it. 










8. 197. Rising Temperature
Table: Weather

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| recordDate    | date    |
| temperature   | int     |
+---------------+---------+
id is the column with unique values for this table.
There are no different rows with the same recordDate.
This table contains information about the temperature on a certain day.
 

Write a solution to find :

1. all dates' id 
2. with higher temperatures 
3. compared to its previous dates (yesterday).

Return the result table in any order.

The result format is in the following example.


TRIALS:


SOLUTION:
                          SELF-JOIN
1  SELECT w1.id
2  FROM Weather w1
3  JOIN Weather w2
4   ON DATEDIFF(w1.recordDate, w2.recordDate) = 1
5  WHERE w1.temperature > w2.temperature;
                           SUB QUERY
SELECT 
    w1.id
FROM 
    Weather w1
WHERE 
    w1.temperature > (
        SELECT 
            w2.temperature
        FROM 
            Weather w2
        WHERE 
            w2.recordDate = DATE_SUB(w1.recordDate, INTERVAL 1 DAY)
    );
                      Cartesian Product or (CROSS JOIN), and WHERE clause. 
SELECT 
    w2.id
FROM 
    Weather w1, Weather w2
WHERE 
    DATEDIFF(w2.recordDate, w1.recordDate) = 1 
AND 
    w2.temperature > w1.temperature;
                                      CTE (Common Table Expressions)

WITH PreviousWeatherData AS
(
    SELECT 
        id,
        recordDate,
        temperature, 
        LAG(temperature, 1) OVER (ORDER BY recordDate) AS PreviousTemperature,
        LAG(recordDate, 1) OVER (ORDER BY recordDate) AS PreviousRecordDate
    FROM 
        Weather
)
SELECT 
    id 
FROM 
    PreviousWeatherData
WHERE 
    temperature > PreviousTemperature
AND 
    recordDate = DATE_ADD(PreviousRecordDate, INTERVAL 1 DAY);



LEARNING PROCESS:

The exercise seemed super easy, but was difficult to understand because I have no idea how we (find all the dates'id with higher
temperatures compared to the previous day.) I went right away to Chatgpt and asked, because I never had this type of 
challenge. Now I get the code that I would never get my answer to this stage, but anyway. Let me share my thoughts, how I understand 
this code. The question has one table; it does not tell me implicitly that you need to do a self-join, but the exercise is written as 
self-join code. The first line of code is we are selecting from the weather table id with alias w1.id, so in the 2nd line of code, you 
have the tableweather which has an we created alias w1, it seems that we can also simply put the alias next to the table without the "AS".
In the 3rd line of code joins the table with itself by doing a self-join and creating an alias of Weather (w2). Now in the 4th line, we
are joining on recorddate, but we are doing something different this time. Like we are not doing the usual join to find the matching rows.
In this case, we are with the DATEDIFF function to get the date difference in 1 day, and then we are comparing today’s temperature with 
yesterday’s temperature.. With the WHERE clause, we are filtering temperatures and asking give us only those rows where the temperature 
is greater than the previous day. This was my understanding of the code. What we did was time series analysis with temperature. Actually 
there were different options for resolving this problem, such as with Common Table Expression (CTE), Subquery, and Cartesian Product, and 
Where clause. 







9. 1661. Average Time of Process per Machine

There is a factory website that has several machines each running the same number of processes. Write a solution to find the average 
time each machine takes to complete a process.

The time to complete a process is the 'end' timestamp minus the 'start' timestamp. The average time is calculated by the total 
time to complete every process on the machine divided by the number of processes that were run.

The resulting table should have the machine_id along with the average time as processing_time, which should be rounded to 3 decimal 
places.
Return the result table in any order.

TRIALS:

WITH duration AS (
  SELECT 
    machine_id,
    process_id,
    activity_type,
    MAX(CASE WHEN activity_type = 'end' THEN timestamp END) -
    MIN(CASE WHEN activity_type = 'start' THEN timestamp END) AS total_duration
    FROM Activity
    GROUP BY machine_id, process_id, activity_type
)
SELECT DISTINCT
machine_id,
AVG(total_duration) AS processing_time
FROM duration
GROUP BY machine_id, process_id, activity_type;
_______________________________________________________

CODE SOLUTION: 

WITH duration AS (
  SELECT 
    machine_id,
    process_id,
    activity_type,
    MAX(CASE WHEN activity_type = 'end' THEN timestamp END) -
    MIN(CASE WHEN activity_type = 'start' THEN timestamp END) AS total_duration
    FROM Activity
    GROUP BY machine_id, process_id
)
SELECT DISTINCT
machine_id,
ROUND(AVG(total_duration),3) AS processing_time
FROM duration
GROUP BY machine_id;


LEARNING PROCESS:


In this challenge, I used CTE, as I understood calculating the timestamp and other complex things we need, CTE, that's why
I looked at Chatgpt to give me the syntax for the CTE. How can we calculate the total duration? So basically, we start writing the code
with the opening WITH clause of the CTE, we name our temporary table, in our case is duration and then with write the AS keyword 
and open the parenthesis, then we select our columns, with CASE WHEN we count the total duration by counting the max of end and min of start, 
We are counting the exact max of end time because there might be many ends which are different in seconds or minutes, that's why where are 
being accurate with that part. We group by machine_id and process_id. So one mistake I made was that I grouped by activity also, but it 
seemed that. It was not necessary because we are counting the activity type and the duration, so we would not need this; otherwise, we would 
get null values. 




________________




10. 577. Employee Bonus

Table: Employee

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| empId       | int     |
| name        | varchar |
| supervisor  | int     |
| salary      | int     |
+-------------+---------+
empId is the column with unique values for this table.
Each row of this table indicates the name and the ID of an employee in addition to their salary and the id of their manager.

Table: Bonus

+-------------+------+
| Column Name | Type |
+-------------+------+
| empId       | int  |
| bonus       | int  |
+-------------+------+
empId is the column of unique values for this table.
empId is a foreign key (reference column) to empId from the Employee table.
Each row of this table contains the id of an employee and their respective bonus.
 

Write a solution to report the name and bonus amount of each employee with a bonus less than 1000.



TRIALS:

SELECT Employee.name, Bonus.bonus
FROM Employee
LEFT JOIN Bonus
ON Employee.empID = Bonus.empID
WHERE bonus < 1000;


SOLUTION:

(1)
SELECT Employee.name, Bonus.bonus
FROM Employee
LEFT JOIN Bonus
ON Employee.empID = Bonus.empID
WHERE bonus IS NULL OR bonus < 1000;

(2)

WITH EmployeeBonus AS (
    SELECT Employee.name, Bonus.bonus
    FROM Employee
    LEFT JOIN Bonus
    ON Employee.empID = Bonus.empID
)
SELECT name, bonus
FROM EmployeeBonus
WHERE bonus IS NULL OR bonus < 1000;


THOUGHTS:

The challenge seemed very easy, I tried and solved it in 17 minutes, which I am proud of myself. One part of this problem that confused me
was the filtering part with the condition where I filtered only one time but it seems that it is also we can filter two time with WHERE clause
using OR operator to give the second condition. So what we do is basically write the WHERE clause and the column is for instance equal to 90
OR the column is null also and thats is. So another option would be to make the full outer join but in MySQL it does not work we need to use
UNION ALL for that. But I used this simple solution for it. Now I am curious if I can solve this with CTE. Here I got the CTE version also,
but generally, as I see it, if the WHERE clause makes a clear filter that's fine. Let it be like that. No Neet to make it more complext with
CTE. 


11. 1280. Students and Examinations

Write a solution to find the number of times each student attended each exam.

Return the result table ordered by student_id and subject_name.


TRIALS: 

SELECT 
    Students.student_id, 
    Students.student_name, 
    Subjects.subject_name
     COUNT()AS attended_exams
     FROM Students
     LEFT JOIN Examinations
     ON Students.students_id = Examinations.student_id
     LEFT JOIN Examinations.subject_name = Subjects.subject_name
     ORDER BY student_id, subject_name ASC;
(2)
SELECT 
    Students.student_id, 
    Students.student_name,
    Subjects.subject_name,
 COUNT(Examinations.student_id) AS attended_exams
     FROM 
        Students
    LEFT JOIN  
        Examinations 
    ON Students.student_id = Examinations.student_id
    LEFT JOIN 
        Subjects
    ON Examinations.subject_name = Subjects.subject_name
    ORDER BY student_id, subject_name ASC;

(3)

SELECT
Students.student_id,
Students.student_name,
Subjects.subject_name,
Students.student_id AS attended_exams
FROM Subjects
LEFT JOIN  Examinations 
ON Subjects.subject_name = Examinations.subject_name
CROSS JOIN Students
ON Students.student_id = Examinations.student_id
GROUP BY Students.student_id, Subjects.subject_name
ORDER BY Students.student_id, Subjects.subject_name;

________



SOLUTION:

(1)

SELECT
Students.student_id,
Students.student_name,
Subjects.subject_name,
COUNT(Examinations.subject_name) AS attended_exams
FROM Students
CROSS JOIN  Subjects 
LEFT JOIN Examinations 
    ON Students.student_id = Examinations.student_id
    AND Subjects.subject_name = Examinations.subject_name
GROUP BY Students.student_id, Subjects.subject_name
ORDER BY Students.student_id, Subjects.subject_name;

(2) With CTE

WITH joined_tables AS (
    SELECT
        Students.student_id,
        Students.student_name,
        Examinations.subject_name
    FROM Students
    LEFT JOIN Examinations
        ON Students.student_id = Examinations.student_id
)
SELECT
    Students.student_id,
    Students.student_name,
    Subjects.subject_name,
    COUNT(joined_tables.subject_name) AS attended_exams
FROM Students
CROSS JOIN Subjects
LEFT JOIN joined_tables
    ON Students.student_id = joined_tables.student_id
    AND Subjects.subject_name = joined_tables.subject_name
GROUP BY Students.student_id, Students.student_name, Subjects.subject_name
ORDER BY Students.student_id, Students.student_name, Subjects.subject_name;




THOUGHTS: 
Very complex query in terms of conceptual understanding. 





















